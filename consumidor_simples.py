import pika
import json

# --- Teste de conex√£o ---
try:
    test_connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
    test_connection.close()
    print('‚úÖ Conex√£o com RabbitMQ bem-sucedida.')
except pika.exceptions.AMQPConnectionError:
    print('‚ùå Falha ao conectar ao RabbitMQ. Verifique se o servi√ßo est√° rodando e acess√≠vel.')
    exit(1)

# --- Configura√ß√µes ---
RABBITMQ_HOST = 'localhost'
EXCHANGE_NAME = 'price_update_topic'

# --- Conex√£o com RabbitMQ ---
connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
channel = connection.channel()

# --- Declara√ß√£o da Exchange (boa pr√°tica declarar em ambos os lados) ---
channel.exchange_declare(exchange=EXCHANGE_NAME, exchange_type='fanout')

# --- Declara√ß√£o da Fila ---
# Declara uma fila com um nome exclusivo gerado pelo RabbitMQ.
# exclusive=True significa que a fila ser√° deletada quando a conex√£o for fechada.
# Isso √© perfeito para consumidores de um t√≥pico, pois cada um tem sua pr√≥pria "c√≥pia" da mensagem.
result = channel.queue_declare(queue='', exclusive=True)
queue_name = result.method.queue

# --- Binding (Liga√ß√£o) ---
# Liga a nossa fila √† exchange. Agora, todas as mensagens publicadas na exchange
# 'price_update_topic' ser√£o enviadas para a nossa fila.
channel.queue_bind(exchange=EXCHANGE_NAME, queue=queue_name)

print("‚úÖ Consumidor conectado. Aguardando pre√ßos...")

# --- Fun√ß√£o de Callback ---
def callback(ch, method, properties, body):
    """Fun√ß√£o executada quando uma mensagem √© recebida."""
    dados_do_preco = json.loads(body)
    print(f" [üì•] Pre√ßo recebido: {dados_do_preco}")
    # Por enquanto, s√≥ imprimimos. No futuro, aqui entrar√° a l√≥gica de neg√≥cio.
    
# --- Inicia o Consumo ---
channel.basic_consume(
    queue=queue_name,
    on_message_callback=callback,
    auto_ack=True # Acknowledge autom√°tico por simplicidade neste passo
)

try:
    channel.start_consuming()
except KeyboardInterrupt:
    print("\nüõë Consumidor interrompido.")
    connection.close()