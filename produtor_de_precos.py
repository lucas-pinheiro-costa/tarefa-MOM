import pika
import json
import time
import random

# --- Configura√ß√µes ---
# RABBITMQ_HOST = 'localhost' # Aqui usamos o nome do servi√ßo localmente
RABBITMQ_HOST = 'rabbitmq' # Usamos o nome do servi√ßo do docker-compose
EXCHANGE_NAME = 'price_update_topic' # Nome da nossa exchange (t√≥pico)

# Configura√ß√µes de DLQ (para monitoramento opcional)
DEAD_LETTER_QUEUE = 'historico_dlq'

def connect_rabbitmq():
    """Conecta ao RabbitMQ e retorna connection e channel."""
    try:
        connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
        channel = connection.channel()
        return connection, channel
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao RabbitMQ: {e}")
        return None, None

def check_dlq_messages(channel):
    """Verifica quantas mensagens est√£o na DLQ."""
    try:
        method = channel.queue_declare(queue=DEAD_LETTER_QUEUE, passive=True)
        message_count = method.method.message_count
        if message_count > 0:
            print(f"‚ö†Ô∏è  DLQ cont√©m {message_count} mensagem(s) para an√°lise")
        else:
            print("‚úÖ DLQ est√° vazia")
        return message_count
    except Exception as e:
        print(f"‚ùå Erro ao verificar DLQ: {e}")
        return 0

def main():
    """Fun√ß√£o principal do produtor de pre√ßos."""
    connection = None
    channel = None
    
    try:
        # --- Conex√£o com RabbitMQ ---
        print("üê∞ Conectando ao RabbitMQ...")
        connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
        channel = connection.channel()

        # --- Declara√ß√£o da Exchange ---
        # Declara uma exchange do tipo 'fanout'.
        # Fanout entrega a mensagem para todas as filas que est√£o ligadas a ela.
        # √â o modelo perfeito para o nosso "t√≥pico" de atualiza√ß√£o de pre√ßos.
        channel.exchange_declare(exchange=EXCHANGE_NAME, exchange_type='fanout', durable=True)

        print("‚úÖ Produtor conectado e pronto para enviar pre√ßos.")

        # --- Loop de Publica√ß√£o ---
        count = 0
        while True:
            count += 1
            message_body = None

            # A cada 5 mensagens, envia uma mensagem "ruim" para testar a DLQ
            if count % 5 == 0:
                voo_simulado_ruim = {
                    'id_voo': 'G31420',
                    'origem': 'NAT',
                    'destino': 'GRU',
                    # 'preco' est√° faltando propositalmente para testar DLQ
                    'timestamp': time.time()
                }
                message_body = json.dumps(voo_simulado_ruim)
                print(f" [‚ò†Ô∏è] Enviando mensagem malformada (teste DLQ) - #{count}")
            else:
                preco_simulado = round(random.uniform(500, 4000), 2)
                voo_simulado = {
                    'id_voo': 'G31420',
                    'origem': 'NAT',
                    'destino': 'GRU',
                    'preco': preco_simulado,
                    'timestamp': time.time()
                }
                message_body = json.dumps(voo_simulado)
                print(f" [‚úàÔ∏è] Pre√ßo enviado: R${preco_simulado} - #{count}")

            # Publica a mensagem
            channel.basic_publish(
                exchange=EXCHANGE_NAME,
                routing_key='',
                body=message_body,
                properties=pika.BasicProperties(
                    delivery_mode=2,  # Torna a mensagem persistente
                )
            )
            
            print(f"‚úÖ Mensagem #{count} enviada com sucesso!")
            
            # Verifica se h√° mensagens na DLQ a cada 10 mensagens enviadas
            if count % 10 == 0:
                print(f"\nüìä Verificando status da DLQ ap√≥s {count} mensagens...")
                dlq_conn, dlq_channel = connect_rabbitmq()
                if dlq_channel:
                    try:
                        check_dlq_messages(dlq_channel)
                    except Exception as e:
                        print(f"‚ùå Erro ao verificar DLQ: {e}")
                    finally:
                        if dlq_conn and not dlq_conn.is_closed:
                            dlq_conn.close()
                else:
                    print("‚ùå Erro ao conectar para verifica√ß√£o da DLQ.")
                print("=" * 50)
            
            # Pausa entre mensagens
            time.sleep(3)

    except pika.exceptions.AMQPConnectionError as e:
        print(f"‚ùå Erro de conex√£o com RabbitMQ: {e}")
    except pika.exceptions.ConnectionClosed:
        print("‚ùå Conex√£o com RabbitMQ foi fechada.")
    except KeyboardInterrupt:
        print("\nüõë Produtor interrompido pelo usu√°rio.")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
    finally:
        # Fechamento seguro da conex√£o
        if connection and not connection.is_closed:
            try:
                connection.close()
                print("‚úÖ Conex√£o com RabbitMQ fechada com sucesso.")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao fechar conex√£o: {e}")

if __name__ == '__main__':
    main()